"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const mysensors_mqtt_1 = require("../lib/decoder/mysensors-mqtt");
const mysensors_serial_1 = require("../lib/decoder/mysensors-serial");
const nullcheck_1 = require("../lib/nullcheck");
module.exports = (RED) => {
    RED.nodes.registerType('mysdecode', function (props) {
        const config = props;
        if (nullcheck_1.NullCheck.isDefinedNonNullAndNotEmpty(props.database)) {
            this.database = RED.nodes.getNode(props.database);
        }
        this.enrich = props.enrich;
        if (config.mqtt) {
            if (this.enrich && nullcheck_1.NullCheck.isDefinedOrNonNull(this.database)) {
                this.decoder = new mysensors_mqtt_1.MysensorsMqtt(props.enrich, this.database.database);
            }
            else {
                this.decoder = new mysensors_mqtt_1.MysensorsMqtt();
            }
        }
        else {
            if (this.enrich && nullcheck_1.NullCheck.isDefinedOrNonNull(this.database)) {
                this.decoder = new mysensors_serial_1.MysensorsSerial(props.enrich, this.database.database);
            }
            else {
                this.decoder = new mysensors_serial_1.MysensorsSerial();
            }
        }
        RED.nodes.createNode(this, config);
        this.on('input', (msg) => __awaiter(this, void 0, void 0, function* () {
            this.send(yield this.decoder.decode(msg));
        }));
    });
};

"use strict";
const mysensors_types_1 = require("../lib/mysensors-types");
function getSensor(config) {
    const sensor = {
        ack: config.ack ? 1 : 0,
        childSensorId: Number(config.childid),
        messageType: Number(config.msgtype),
        nodeId: Number(config.nodeid),
        payload: '',
        subType: Number(config.subtype),
    };
    return sensor;
}
module.exports = (RED) => {
    RED.nodes.registerType('mysencap', function (props) {
        const config = props;
        RED.nodes.createNode(this, config);
        this.sensor = getSensor(config);
        this.presentation = config.presentation || false;
        this.presentationtext = config.presentationtext || '';
        this.presentationtype = config.presentationtype || 0;
        this.fullpresentation = config.fullpresentation || false;
        this.internal = config.internal || 0;
        this.firmwarename = config.firmwarename || '';
        this.firmwareversion = config.firmwareversion || '';
        if (this.presentation) {
            setTimeout(() => {
                const msg = getSensor(config);
                msg.ack = 0;
                if (this.fullpresentation) {
                    msg.messageType = 3;
                    msg.childSensorId = 255;
                    msg.subType = 11;
                    msg.payload = this.firmwarename;
                    this.send(msg);
                    msg.subType = 12;
                    msg.payload = this.firmwareversion;
                    this.send(msg);
                }
                msg.messageType = 0;
                msg.subType = this.presentationtype;
                msg.payload = this.presentationtext;
                this.send(msg);
            }, 5000);
        }
        this.on('input', (msg) => {
            const msgOut = this.sensor;
            msgOut.payload = msg.payload;
            if (this.sensor.messageType === 3) {
                msgOut.childSensorId = 255;
                msgOut.subType = this.internal;
            }
            this.send(msgOut);
        });
    });
    RED.httpAdmin.get('/mysensordefs/:id', RED.auth.needsPermission(''), (req, res) => {
        const type = req.params.id;
        let mysVal;
        switch (type) {
            case 'subtype':
                mysVal = mysensors_types_1.mysensor_data;
                break;
            case 'presentation':
                mysVal = mysensors_types_1.mysensor_sensor;
                break;
            case 'internal':
                mysVal = mysensors_types_1.mysensor_internal;
                break;
        }
        res.json(JSON.stringify({ data: Object.keys(mysVal).filter((k) => typeof mysVal[k] === 'number') }));
    });
};

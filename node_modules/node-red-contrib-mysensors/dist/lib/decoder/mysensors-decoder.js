"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const mysensors_types_1 = require("../mysensors-types");
const nullcheck_1 = require("../nullcheck");
class MysensorsDecoder {
    constructor(enrich, database) {
        this.database = database;
        this.enrichWithDb = enrich || false;
    }
    enrich(msg) {
        return __awaiter(this, void 0, void 0, function* () {
            if (nullcheck_1.NullCheck.isDefinedOrNonNull(msg.messageType)) {
                msg.messageTypeStr = mysensors_types_1.mysensor_command[msg.messageType];
            }
            if (nullcheck_1.NullCheck.isDefinedOrNonNull(msg.subType)) {
                switch (msg.messageType) {
                    case mysensors_types_1.mysensor_command.C_INTERNAL:
                        msg.subTypeStr = mysensors_types_1.mysensor_internal[msg.subType];
                        break;
                    case mysensors_types_1.mysensor_command.C_PRESENTATION:
                        msg.subTypeStr = mysensors_types_1.mysensor_sensor[msg.subType];
                        break;
                    case mysensors_types_1.mysensor_command.C_REQ:
                    case mysensors_types_1.mysensor_command.C_SET:
                        msg.subTypeStr = mysensors_types_1.mysensor_data[msg.subType];
                        break;
                    case mysensors_types_1.mysensor_command.C_STREAM:
                        msg.subTypeStr = mysensors_types_1.mysensor_stream[msg.subType];
                }
            }
            if (this.enrichWithDb &&
                nullcheck_1.NullCheck.isDefinedOrNonNull(msg.nodeId) &&
                nullcheck_1.NullCheck.isDefinedOrNonNull(msg.childSensorId) &&
                nullcheck_1.NullCheck.isDefinedOrNonNull(this.database)) {
                const res = yield this.database.getChild(msg.nodeId, msg.childSensorId);
                if (nullcheck_1.NullCheck.isDefinedOrNonNull(res)) {
                    msg.sensorTypeStr = mysensors_types_1.mysensor_sensor[res.sType];
                }
            }
            return msg;
        });
    }
}
exports.MysensorsDecoder = MysensorsDecoder;

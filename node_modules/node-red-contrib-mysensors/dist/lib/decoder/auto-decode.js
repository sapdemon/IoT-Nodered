"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const mysensors_msg_1 = require("../mysensors-msg");
const nullcheck_1 = require("../nullcheck");
const mysensors_mqtt_1 = require("./mysensors-mqtt");
const mysensors_serial_1 = require("./mysensors-serial");
function AutoDecode(msg) {
    return __awaiter(this, void 0, void 0, function* () {
        if (nullcheck_1.NullCheck.isUndefinedOrNull(msg.nodeId)) {
            let msgTmp;
            if (nullcheck_1.NullCheck.isUndefinedNullOrEmpty(msg.topic)) {
                msgTmp = yield new mysensors_serial_1.MysensorsSerial().decode(msg);
            }
            else {
                msgTmp = yield new mysensors_mqtt_1.MysensorsMqtt().decode(msg);
            }
            if (nullcheck_1.NullCheck.isDefinedOrNonNull(msgTmp)) {
                msg = msgTmp;
            }
            else {
                msg.origin = mysensors_msg_1.MsgOrigin.decoded;
            }
        }
        return msg;
    });
}
exports.AutoDecode = AutoDecode;

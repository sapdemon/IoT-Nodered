"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const mysensors_msg_1 = require("../mysensors-msg");
const nullcheck_1 = require("../nullcheck");
const mysensors_decoder_1 = require("./mysensors-decoder");
class MysensorsMqtt extends mysensors_decoder_1.MysensorsDecoder {
    decode(msg) {
        return __awaiter(this, void 0, void 0, function* () {
            if (nullcheck_1.NullCheck.isDefinedNonNullAndNotEmpty(msg.topic)) {
                const msgOut = msg;
                const split = msg.topic.toString().split('/');
                if (split.length >= 6) {
                    msgOut.topicRoot = split.slice(0, split.length - 5).join('/');
                    msgOut.nodeId = parseInt(split[split.length - 5], 10);
                    msgOut.childSensorId = parseInt(split[split.length - 4], 10);
                    msgOut.messageType = parseInt(split[split.length - 3], 10);
                    msgOut.ack = (split[split.length - 2] === '1') ? 1 : 0;
                    msgOut.subType = parseInt(split[split.length - 1], 10);
                    msgOut.origin = mysensors_msg_1.MsgOrigin.mqtt;
                    return yield this.enrich(msgOut);
                }
            }
        });
    }
    encode(msg) {
        if (nullcheck_1.NullCheck.isDefinedOrNonNull(msg.nodeId)) {
            msg.topic = (nullcheck_1.NullCheck.isDefinedNonNullAndNotEmpty(msg.topicRoot) ? (msg.topicRoot + '/') : '')
                + msg.nodeId + '/'
                + msg.childSensorId + '/'
                + msg.messageType + '/'
                + msg.ack + '/'
                + msg.subType;
            return msg;
        }
    }
}
exports.MysensorsMqtt = MysensorsMqtt;

"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const sqlite_1 = require("sqlite");
const nullcheck_1 = require("./nullcheck");
class DatabaseSqlite {
    constructor(file) {
        this.file = file;
        if (nullcheck_1.NullCheck.isUndefinedNullOrEmpty(this.file)) {
        }
        else {
            this.dbPromise = Promise.resolve()
                .then(() => sqlite_1.open(this.file))
                .then((db) => db.migrate({ migrationsPath: path.dirname(__dirname) + '/migrations' }));
            this.checkDb();
        }
    }
    nodeHeard(nodeId) {
        return __awaiter(this, void 0, void 0, function* () {
            const db = yield this.dbPromise;
            yield db.run(`update node set lastHeard=CURRENT_TIMESTAMP, used=1 where nodeId=${nodeId}`);
        });
    }
    sketchName(nodeId, name) {
        return __awaiter(this, void 0, void 0, function* () {
            const db = yield this.dbPromise;
            yield db.run(`update node set sketchName='${name}' where nodeId=${nodeId}`);
        });
    }
    sketchVersion(nodeId, version) {
        return __awaiter(this, void 0, void 0, function* () {
            const db = yield this.dbPromise;
            yield db.run(`update node set sketchVersion='${version}', lastRestart=CURRENT_TIMESTAMP where nodeId=${nodeId}`);
        });
    }
    getNodeList() {
        return __awaiter(this, void 0, void 0, function* () {
            const db = yield this.dbPromise;
            const result = (yield db.all('select * from node where used=1'));
            return result;
        });
    }
    getFreeNodeId() {
        return __awaiter(this, void 0, void 0, function* () {
            const db = yield this.dbPromise;
            const res = yield db.get('select min(nodeId) id from node where used=0');
            return res.id;
        });
    }
    close() {
        return __awaiter(this, void 0, void 0, function* () {
            const db = yield this.dbPromise;
            yield db.close();
        });
    }
    setParent(node, last) {
        return __awaiter(this, void 0, void 0, function* () {
            const db = yield this.dbPromise;
            yield db.run(`update node set parentId=${last} where nodeId=${node}`);
        });
    }
    child(nodeId, childId, type, description) {
        return __awaiter(this, void 0, void 0, function* () {
            const db = yield this.dbPromise;
            db.run(`insert or replace into child (childId, nodeId, sType, description) values(${childId}, ${nodeId}, ${type}, '${description}')`);
        });
    }
    childHeard(nodeId, childId) {
        return __awaiter(this, void 0, void 0, function* () {
            const db = yield this.dbPromise;
            yield db.run(`update child set lastHeard=CURRENT_TIMESTAMP where childId=${childId} and nodeId=${nodeId}`);
        });
    }
    getChild(nodeId, childId) {
        return __awaiter(this, void 0, void 0, function* () {
            const db = yield this.dbPromise;
            const result = (yield db.get(`select * from child where nodeId=${nodeId} and childId=${childId}`));
            return result;
        });
    }
    checkDb() {
        return __awaiter(this, void 0, void 0, function* () {
            const db = yield this.dbPromise;
            const x = yield db.get('select count(nodeId) cnt from node');
            if (x.cnt === 0) {
                for (let i = 1; i <= 254; i++) {
                    db.run(`insert into node (nodeId, used) values (${i}, 0)`);
                }
            }
        });
    }
}
exports.DatabaseSqlite = DatabaseSqlite;

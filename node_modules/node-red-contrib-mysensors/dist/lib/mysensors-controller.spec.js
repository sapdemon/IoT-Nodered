"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const sinon = require("sinon");
const database_sqlite_1 = require("./database-sqlite");
const mysensors_controller_1 = require("./mysensors-controller");
const mysensors_types_1 = require("./mysensors-types");
describe('Controller test', () => {
    let db;
    let controller;
    sinon.stub(database_sqlite_1.DatabaseSqlite.prototype, 'getFreeNodeId').callsFake(() => '777');
    db = new database_sqlite_1.DatabaseSqlite('dummy');
    controller = new mysensors_controller_1.MysensorsController(db, true, true, 'CET', 'M', 'mys-out');
    it('MQTT ID Request', () => __awaiter(this, void 0, void 0, function* () {
        const input = {
            payload: '',
            topic: 'mys-in/255/255/3/0/3',
        };
        const expected = {
            payload: '777',
            subType: mysensors_types_1.mysensor_internal.I_ID_RESPONSE,
            topicRoot: 'mys-out',
        };
        chai_1.expect(yield controller.messageHandler(input))
            .to.include(expected);
    }));
    it('Serial config request', () => __awaiter(this, void 0, void 0, function* () {
        const expected = {
            payload: '255;255;3;0;6;M',
        };
        const request = { payload: '255;255;3;0;6;0' };
        chai_1.expect(yield controller.messageHandler(request)).to.include(expected);
    }));
    it('Decoded time request', () => __awaiter(this, void 0, void 0, function* () {
        const request = {
            ack: 0,
            childSensorId: 255,
            messageType: mysensors_types_1.mysensor_command.C_INTERNAL,
            nodeId: 10,
            payload: '',
            subType: mysensors_types_1.mysensor_internal.I_TIME,
        };
        const expected = {
            payload: '',
            subType: mysensors_types_1.mysensor_internal.I_TIME,
        };
        chai_1.expect(yield controller.messageHandler(request)).to.include.keys(expected);
    }));
    it('updates database uppon reception of package', () => __awaiter(this, void 0, void 0, function* () {
        const spy = sinon.spy(database_sqlite_1.DatabaseSqlite.prototype, 'nodeHeard');
        yield controller.messageHandler({ payload: '10;255;3;0;6;0' });
        chai_1.expect(spy.called).to.eq(true);
    }));
});
